plot(total.steps.perday, type = "h")
hist(total.steps.perday$x)
mean(total.steps.perday$x)
median(total.steps.perday$x)
raw.activity.na.omit <- na.omit(raw.activity)
total.steps.perday <- aggregate(raw.activity.na.omit$steps, by=list(raw.activity.na.omit$date),FUN=sum, na.omit = TRUE)
hist(total.steps.perday$x)
raw.activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
## Section 1 Histogram, Mean and Median steps taken per day####
raw.activity.na.omit <- na.omit(raw.activity)
total.steps.perday <- aggregate(raw.activity.na.omit$steps, by=list(raw.activity.na.omit$date),FUN=sum, na.omit = TRUE)
#total.steps.perday <- na.omit(total.steps.perday)
hist(total.steps.perday$x)
hist(total.steps.perday$x
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
aggregate(raw.activity.na.omit$steps,by = list(raw.activity.na.omit$interval),FUN=mean)
mean.steps.perinterval <- aggregate(raw.activity.na.omit$steps,by = list(raw.activity.na.omit$interval),FUN=mean)
View(mean.steps.perinterval)
plot(x = mean.steps.perinterval$Group.1,y=mean.steps.perinterval$x, type = "l")
plot(x = mean.steps.perinterval$Group.1
,y=mean.steps.perinterval$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylab = "Average steps"
,main = "Average steps taken over a day")
mean.steps.perinterval[order(x),]
mean.steps.perinterval[order(mean.steps.perinterval$x),]
mean.steps.perinterval[order(-mean.steps.perinterval$x),]
mean.steps.perinterval[order(-mean.steps.perinterval$x),1]
head(mean.steps.perinterval[order(-mean.steps.perinterval$x),])
max(mean.steps.perinterval[order(-mean.steps.perinterval$x),])
(mean.steps.perinterval[order(-mean.steps.perinterval$x),])
head(mean.steps.perinterval[order(-mean.steps.perinterval$x),]
head(mean.steps.perinterval[order(-mean.steps.perinterval$x),]))
head(mean.steps.perinterval[order(-mean.steps.perinterval$x),])
mean.steps.sort <- mean.steps.perinterval[order(-mean.steps.perinterval$x),]
head(mean.steps.sort)
summary(raw.activity)
raw.activity.summary$"NA's"
raw.activity.summary <- summary(raw.activity)
fix(raw.activity.summary)
raw.activity.summary$"NA's"
raw.activity.summary[,1]
names(raw.activity.summary)
fix(raw.activity.summary)
summary(raw.activity)
library("plyr", lib.loc="C:/Users/anchiu/Documents/R/win-library/3.0")
library("plyr")
View(raw.activity)
mean.steps.summary <- rename(mean.steps.perinterval,c("Group.1" = "interval"))
join(raw.activity,mean.steps.summary, by = "interval",type = "left")
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
join(raw.activity,mean.steps.summary, by = "interval",type = "left")
raw.activity.meanjoin <- join(raw.activity,mean.steps.summary, by = "interval",type = "left")
View(raw.activity.meanjoin)
View(raw.activity.meanjoin)
raw.activity.meanjoin$steps[is.na(raw.activity.meanjoin$steps)] <- raw.activity.meanjoin$x[is.na(raw.activity.meanjoin$steps)]
View(raw.activity.meanjoin)
hist(raw.activity.meanjoin$steps
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
total.steps.perday.nafill <- aggregate(raw.activity.meanjoin$steps, by=list(raw.activity.meanjoin$date),FUN=sum, na.omit = TRUE)
hist(total.steps.perday.nafill$x
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
mean(total.steps.perday.nafill$x)
median(total.steps.perday.nafill$x)
hist(total.steps.perday$x
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
mean(total.steps.perday$x)
median(total.steps.perday$x)
hist(total.steps.perday.nafill$x
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
mean(total.steps.perday.nafill$x)
median(total.steps.perday.nafill$x)
View(raw.activity.meanjoin)
weekdays(raw.activity.meanjoin$date)
as.Date(raw.activity.meanjoin$date)
raw.activity.meanjoin$date <- as.Date(raw.activity.meanjoin$date)
raw.activity.meanjoin$day.type <- weekdays(raw.activity.meanjoin$date)
View(raw.activity.meanjoin)
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
c("Monday","Tuesday","Wednesday","Thursday","Friday")
raw.activity.meanjoin$dat.type %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")
raw.activity.meanjoin$dat.type in c("Monday","Tuesday","Wednesday","Thursday","Friday")
raw.activity.meanjoin$dat.type = c("Monday","Tuesday","Wednesday","Thursday","Friday")
subset(raw.activity.meanjoin, raw.activity.meanjoin$dat.type %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"))
subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"))
weekday <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekday <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% Weekday)
subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% Weekday[,1])
subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% weekday)
activity.weekday <- subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% weekday)
activity.weekend <- subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% weekend)
raw.activity.meanjoin$day.type <- weekdays(raw.activity.meanjoin$date)
activity.weekend <- subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% weekend)
weekend <- c("Saturday","Sunday")
activity.weekend <- subset(raw.activity.meanjoin, raw.activity.meanjoin$day.type %in% weekend)
View(activity.weekday)
hist(x = activity.weekday$interval
,y = activity.weekday$steps
,type = "l")
mean.activity.weekday <- aggregate(activity.weekday$steps,by = list(activity.weekday$interval),FUN=mean)
plot(x = mean.activity.weekday$Group.1
,y=mean.activity.weekday$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylab = "Average steps"
,main = "Average steps taken over a day")
plot(x = mean.activity.weekday$Group.1
,y=mean.activity.weekday$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylab = "Average steps"
,main = "Average steps taken over weekdays")
View(activity.weekend)
mean.activity.weekend <- aggregate(mean.activity.weekend$steps,by = list(mean.activity.weekend$interval),FUN=mean)
mean.activity.weekend <- aggregate(activity.weekend$steps,by = list(activity.weekend$interval),FUN=mean)
plot(x = mean.activity.weekend$Group.1
,y=mean.activity.weekend$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylab = "Average steps"
,main = "Average steps taken over weekends")
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
plot(x = mean.activity.weekday$Group.1
,y=mean.activity.weekday$x
, type = "l"
,xlab = "Time of day - 24 hour"
,xlim=c(0, 250)
,ylab = "Average steps"
,main = "Average steps taken over weekdays")
plot(x = mean.activity.weekday$Group.1
,y=mean.activity.weekday$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylim=c(0, 250)
,ylab = "Average steps"
,main = "Average steps taken over weekdays")
plot(x = mean.activity.weekday$Group.1
,y=mean.activity.weekday$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylim=c(0, 250)
,ylab = "Average steps"
,main = "Average steps taken over weekdays")
plot(x = mean.activity.weekend$Group.1
,y=mean.activity.weekend$x
, type = "l"
,xlab = "Time of day - 24 hour"
,ylim=c(0, 250)
,ylab = "Average steps"
,main = "Average steps taken over weekends")
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
par(mfrow=c(1,1))
hist(total.steps.perday$x
,xlab = "Total steps per day"
,main = "Histogram of total steps per day")
mean(total.steps.perday$x)
median(total.steps.perday$x)
mean(total.steps.perday.nafill$x)
median(total.steps.perday.nafill$x)
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
source('~/Data Specialization/Reproducible Research/Peer Assessment 1/PA1 working.R')
library('sqldf')
downloadSQL <- function(server, database, table, clause = ""){
myconn <- odbcDriverConnect(paste("DRIVER=SQL Server;Trusted_Connection=Yes;DATABASE=", database, ";SERVER=", server, sep=""))
dataset <- sqlQuery(myconn, paste("SELECT * FROM ", table, " ",clause, sep = ""))
dataset
}
downloadSQLSample <- function(server, database, table, sampleSize){
myconn <- odbcDriverConnect(paste("DRIVER=SQL Server;Trusted_Connection=Yes;DATABASE=", database, ";SERVER=", server, sep=""))
dataset <- sqlQuery(myconn, paste("SELECT top ",sampleSize," * FROM ", table, " order by newid()", sep = ""))
dataset
}
dropTableIfExistsSQL <- function(server, database, table){
myconn <- odbcDriverConnect(paste("DRIVER=SQL Server; Trusted_Connection=Yes; DATABASE=", database, "; SERVER=", server, sep=""))
str <- paste("IF OBJECT_ID('",table,"') IS NOT NULL DROP TABLE ",table, sep="")
sqlQuery(myconn,str)
close(myconn)
remove(myconn)
}
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
uploadSQL <- function(server, database, table,data){
myconn <- odbcDriverConnect(paste("DRIVER=SQL Server; Trusted_Connection=Yes; DATABASE=",database, "; SERVER=", server, sep=""))
sqlSave(myconn, data, table)
close(myconn)
remove(myconn)
}
RAW.CLASS.DEPT.RANK <- downloadSQL('AUSYD5315'
,'DT_BIG_W_MERCH_2014'
,'WRK_CLASS_DEPT_RANK_CORRELATION_R_INPUT')
library(RODBC)
library(sqldf)
RAW.CLASS.DEPT.RANK <- downloadSQL('AUSYD5315'
,'DT_BIG_W_MERCH_2014'
,'WRK_CLASS_DEPT_RANK_CORRELATION_R_INPUT')
head(RAW.CLASS.DEPT.RANK)
lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
summary(ranklm)
View(RAW.CLASS.DEPT.RANK)
unique(RAW.CLASS.DEPT.RANK$DEPT_NBR)
unique(RAW.CLASS.DEPT.RANK$DEPT_NBR,RAW.CLASS.DEPT.RANK$CLASS_NBR)
unique(RAW.CLASS.DEPT.RANK[c("DEPT.RANK","CLASS_NBR")])
unique(RAW.CLASS.DEPT.RANK[c("DEPT_NBR","CLASS_NBR")])
for dept in RAW.CLASS.DEPT.RANK$DEPT_NBR
for(dept in RAW.CLASS.DEPT.RANK$DEPT_NBR)
for(dept in RAW.CLASS.DEPT.RANK$DEPT_NBR) {
for (class in RAW.CLASS.DEPT.RANK$CLASS_NBR)
{
}
}
dept.class.combo <- unique(RAW.CLASS.DEPT.RANK[c("DEPT_NBR","CLASS_NBR")])
View(dept.class.combo)
summary(ranklm)
summary(ranklm)$r.squared
corr <- c()
department_nbr <- c()
class_nbr <- c()
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
append(corr,summary(ranklm)$r.squared)
#append(department_nbr,dept)
#append(class_nbr,class)
}
}
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
append(department_nbr,dept)
#append(class_nbr,class)
}
}
fix(department_nbr)
depratment_nbr
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
department_nbr <- append(department_nbr,dept)
#append(class_nbr,class)
}
}
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
append(department_nbr,dept)
#append(class_nbr,class)
}
}
department_nbr <- c()
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
append(department_nbr,dept)
#append(class_nbr,class)
}
}
fix(department_nbr)
department_nbr <- c(1)
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
append(department_nbr,dept)
#append(class_nbr,class)
}
}
depratment_nbr
department_nbr
RAW.CLASS.DEPT.RANK$id <- paste(RAW.CLASS.DEPT.RANK$DEPT_NBR,RAW.CLASS.DEPT.RANK$CLASS_NBR, sep = "-")
View(RAW.CLASS.DEPT.RANK)
fits <- lapply(unique(RAW.CLASS.DEPT.RANK$id),
function(z)lm(rank_class_level~rank_dept_level, data=dt[J(z),], y=T))
dt <- data.table(RAW.CLASS.DEPT.RANK,key="id")
library("data.table", lib.loc="C:/Users/anchiu/Documents/R/win-library/3.0")
dt <- data.table(RAW.CLASS.DEPT.RANK,key="id")
fits <- lapply(unique(RAW.CLASS.DEPT.RANK$id),
function(z)lm(rank_class_level~rank_dept_level, data=dt[J(z),], y=T))
sapply(fits,coef)
fits <- lapply(unique(RAW.CLASS.DEPT.RANK$id),
function(z)lm(rank_class_level~rank_dept_level+factor, data=dt[J(z),], y=T))
fits <- lapply(unique(RAW.CLASS.DEPT.RANK$id),
function(z)lm(rank_class_level~rank_dept_level+factor, data=dt[J(z),], y=T))
unique(RAW.CLASS.DEPT.RANK[c("id ")])
unique(RAW.CLASS.DEPT.RANK[c("id")])
combo <- unique(RAW.CLASS.DEPT.RANK[c("id")])
ncol(combo)
nrow(combo)
corr <- c(965)
corr
department_nbr <- vector()
for(dept in dept.class.combo$DEPT_NBR) {
for (class in dept.class.combo$CLASS_NBR)
{
#ranklm <- lm(rank_class_level ~ rank_dept_level, data = RAW.CLASS.DEPT.RANK)
#append(corr,summary(ranklm)$r.squared)
append(department_nbr,dept)
#append(class_nbr,class)
}
}
fix(department_nbr)
corr <- rep(NA,965)
corr
for(i in nrow(combo)) {print i}
for(i in nrow(combo)) {print(i)}
for(i in 1:nrow(combo)) {print(i)}
View(RAW.CLASS.DEPT.RANK)
subset(RAW.CLASS.DEPT.RANK, id = "41-37")
subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[6,] = "41-37")
subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,6] = "41-37")
subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] = "41-37")
subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == "41-37")
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
#corr[i,] <- lm(rank_class_level ~ rank_dept_level, data = a)
}
View(a)
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
corr[i,] <- lm(rank_class_level ~ rank_dept_level, data = a)
}
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
corr[[i]] <- lm(rank_class_level ~ rank_dept_level, data = a)
}
corr <- vector()
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
corr <- append(corr,lm(rank_class_level ~ rank_dept_level, data = a))
}
fix(corr)
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,i)
}
group <- vector()
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,i)
}
group
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,combo[i,])
}
group
for(i in 1:2) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,combo[i,])
}
group
corr
corr <- vector()
group <- vector()
for(i in 1:2) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,combo[i,])
}
corr
corr <- vector()
group <- vector()
corr <- vector() #rep(NA,965)
department_nbr <- vector()
class_nbr <- vector()
group <- vector()
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,combo[i,])
}
for(dept in dept.class.combo$DEPT_NBR) {
nrow(corr)
nrows(corr)
length(corr)
length(group)
rbind(corr,group)
for (class in dept.class.combo$CLASS_NBR)
mapply(group, corr, FUN=list, SIMPLIFY=FALSE)
mapply(c,group, corr,SIMPLIFY=FALSE)
apply(cbind(group, corr),1,function(x) unname(unlist(x)))
z <- apply(cbind(group, corr),1,function(x) unname(unlist(x)))
View(z)
write.csv(z,file = "regression")
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
group <- append(group,combo[i,])
}
summary(b)
names(summary(b))
summary(b)$coefficients
anova(b)
names(anova(b))
anova(b)$"Pr(>F)"
anova(b)$"F value"
summary(b)$coefficients
names(summary(b)$coefficients)
coef(summary(b))["termname", "Pr(>|t|)"]
coef(summary(b))["Pr(>|t|)"]
coef(summary(b))[c("Pr(>|t|)")]
summary(b)$coefficients
summary(b)$coefficients[,4]
summary(b)$coefficients[2,4]
summary(b)
summary(b)$coefficients[2,4]
source("SQL Functions")
source("SQL Functions")
source("SQL Functions.R")
source('C:/Users/anchiu/Desktop/bigw dept class R2.R')
summary(b)$coefficients[2,4]
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
pvalue <- append(pvalue,summary(b)$coefficients[2,4])
group <- append(group,combo[i,])
}
summary(b)$coefficients[2,4]
source('C:/Users/anchiu/Desktop/bigw dept class R2.R')
source('C:/Users/anchiu/Desktop/bigw dept class R2.R')
corr <- vector()
pvalue <- vector()
group <- vector()
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
pvalue <- append(pvalue,summary(b)$coefficients[2,4]) ####Uncomment before running
group <- append(group,combo[i,])
}
summary(b)$coefficients[2,4]
for(i in 1) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
pvalue <- append(pvalue,summary(b)$coefficients[2,4]) ####Uncomment before running
group <- append(group,combo[i,])
}
summary(b)$coefficients[2,4]
summary(b)
summary(b)$coefficients
summary(b)$coefficients[2,4]
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
pvalue <- append(pvalue,summary(b)$coefficients[2,4]) ####Uncomment before running
group <- append(group,combo[i,])
}
#nrow(combo) #965
corr <- vector()
pvalue <- vector()
group <- vector()
nstores <- vector()
for(i in 1:nrow(combo)) {
a <- subset(RAW.CLASS.DEPT.RANK, RAW.CLASS.DEPT.RANK[,c(6)] == combo[i,])
b <- lm(rank_class_level ~ rank_dept_level, data = a)
corr <- append(corr,summary(b)$r.squared)
#pvalue <- append(pvalue,summary(b)$coefficients[2,4]) ####Uncomment before running
group <- append(group,combo[i,])
nstores <- append(nstores,nrow(a))
}
View(z)
z <- apply(cbind(group,corr,nstores),1,function(x) unname(unlist(x)))
View(z)
write.csv(z,file = "regression")
source('C:/Users/anchiu/Desktop/bigw dept class R2.R')
ppois(10,lambda = 5*3)
nosim <- 1000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
nosim <- 1000
n <- 100
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
nosim <- 1000
n <- 100
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))*0.5
install.packages("forecast")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
setwd("~/Data Specialization/Developing Data Products/mydeck")
